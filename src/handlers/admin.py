import random
from pathlib import Path

from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from services.chat_storage import save_chat_id, load_chat_id
from services.hr_storage import HR_IDS, save_hr
from services.storage_service import StorageService, save_photo
from users.filters import is_hr
from utils.utils import cancel_kb

router = Router()
storage = StorageService()


class AddEmployee(StatesGroup):
    name = State()
    birthday = State()
    telegram = State()
    position = State()
    gender = State()
    photo = State()
    welcome_confirm = State()


class CongratsEmployee(StatesGroup):
    waiting_text = State()

CANCEL_STATES = [
    AddEmployee.name.state,
    AddEmployee.birthday.state,
    AddEmployee.position.state,
    AddEmployee.telegram.state,
    AddEmployee.gender.state,
    AddEmployee.photo.state
]


@router.message(F.chat.type == "private", Command("add_employee"))
async def start_add_employee(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await state.set_state(AddEmployee.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=cancel_kb)


@router.message(F.chat.type == "private",AddEmployee.name, F.text)
async def process_name(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    await state.update_data(name=message.text.strip())
    await state.set_state(AddEmployee.birthday)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:", reply_markup=cancel_kb)


@router.message(F.chat.type == "private",AddEmployee.birthday, F.text)
async def process_birthday(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    from re import match
    text = message.text.strip()
    if not match(r"^\d{4}-\d{2}-\d{2}$", text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1995-09-10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(birthday=text)
    await state.set_state(AddEmployee.position)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=cancel_kb)

@router.message(F.chat.type == "private",AddEmployee.position, F.text)
async def process_position(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    text = message.text.strip()

    await state.update_data(position=text)
    await state.set_state(AddEmployee.telegram)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):", reply_markup=cancel_kb)



@router.message(F.chat.type == "private",AddEmployee.telegram, F.text)
async def process_telegram(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    text = message.text.strip()
    if not text.startswith("@"):
        await message.answer("Telegram –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(telegram=text)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
                InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female"),
            ]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)

@router.callback_query(lambda c: c.data in ["gender_male", "gender_female"])
async def process_gender(query: CallbackQuery, state: FSMContext):
    gender = "male" if query.data == "gender_male" else "female"
    await state.update_data(gender=gender)
    await state.set_state(AddEmployee.photo)
    await query.message.edit_text("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª):")


@router.message(F.chat.type == "private",AddEmployee.photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    data = await state.get_data()
    safe_name = "_".join(data["name"].split())
    filename = f"{safe_name}.jpg"
    file_id = message.photo[-1].file_id
    await save_photo(message.bot, file_id, filename)

    storage.add_employee(
        name=data["name"],
        birthday=data["birthday"],
        telegram=data["telegram"],
        position=data['position'],
        gender=data['gender'],
        photo_filename=filename
    )
    await state.update_data(photo=filename)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéâ –î–∞", callback_data="welcome_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="welcome_no"),
            ]
        ]
    )
    await message.answer(
        f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{data['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –∫–æ–º–∞–Ω–¥—É?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(AddEmployee.welcome_confirm)

@router.callback_query(lambda c: c.data in ["welcome_yes", "welcome_no"])
async def process_welcome_callback(query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    BASE_DIR = Path(__file__).parent.parent
    PHOTOS_DIR = BASE_DIR / "photos"
    if current_state != AddEmployee.welcome_confirm.state:
        return

    data = await state.get_data()
    chat_id = load_chat_id()

    await state.clear()

    welcome_templates = [
        "‚ú® –£ –Ω–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! ‚ú®\n–°–µ–≥–æ–¥–Ω—è –∫ –Ω–∞–º {joined} <b>{name}</b>, {position} üôå\n\n–ñ–µ–ª–∞–µ–º –ª—ë–≥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞...",
        "üéâ –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∞ –±–æ–ª—å—à–µ –∏ —Å–∏–ª—å–Ω–µ–µ! üéâ\n–°–µ–≥–æ–¥–Ω—è –∫ –Ω–∞–º {joined} <b>{name}</b>, {position} ‚ú®\n–ü—É—Å—Ç—å –≤–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥—ã!",
        "üî• –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! üî•\n–ö –Ω–∞–º {joined} –∫–æ–ª–ª–µ–≥–∞ ‚Äî <b>{name}</b>, {position}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "üéâ –î—Ä—É–∑—å—è, —É –Ω–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! üéâ\n–°–µ–≥–æ–¥–Ω—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ {joined} <b>{name}</b>, {position}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üöÄ"
    ]

    if query.data == "welcome_yes":
        gender = data.get("gender", "male")
        joined_word = "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è" if gender == "male" else "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å"

        text = random.choice(welcome_templates).format(
            name=data['name'],
            position=data['position'],
            joined=joined_word
        )
        if data.get('telegram'):
            text += f" üíº {data['telegram']}"

        if data.get("photo"):
            photo_path = PHOTOS_DIR / data["photo"]
            photo_file = FSInputFile(path=str(photo_path))
            if photo_path.exists():
                await query.bot.send_photo(chat_id=chat_id, photo=photo_file, caption=text, parse_mode="HTML")
        else:
            await query.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")

        await query.message.edit_text(
            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{data['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            parse_mode="HTML"
        )
    else:
        await query.message.edit_text(
            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{data['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω.",
            parse_mode="HTML"
        )

@router.message(F.chat.type == "private",AddEmployee.photo)
async def wrong_photo(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ, –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç üì∑", reply_markup=cancel_kb)


@router.message(F.chat.type == "private",Command("list_employees"))
async def list_employees(message: Message):
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=cancel_kb)

    employees = storage.get_all()
    if not employees:
        await message.answer("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üë• <b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>:\n\n"
    for idx, emp in enumerate(employees, start=1):
        if emp.get('position'):
            text += (
                f"{idx}. <b>{emp['name']}</b> - {emp['position']}\n"
                f"üéÇ {emp['birthday']}   üíº {emp['telegram']}\n"
                f"üÜî ID: <code>{emp['id']}</code>\n\n"
            )
        else:
            text += (
                f"{idx}. <b>{emp['name']}</b>\n"
                f"üéÇ {emp['birthday']}   üíº {emp['telegram']}\n"
                f"üÜî ID: <code>{emp['id']}</code>\n\n"
            )


    await message.answer(text)


class RemoveEmployee(StatesGroup):
    waiting_id = State()


@router.message(F.chat.type == "private",Command("remove_employee"))
async def remove_employee_start(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    await state.set_state(RemoveEmployee.waiting_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, "
        "–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=cancel_kb
    )


@router.message(F.chat.type == "private",RemoveEmployee.waiting_id)
async def remove_employee_confirm(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    emp_id = message.text.strip()
    removed = storage.remove_employee(emp_id)

    if removed:
        await message.answer(f"üóë –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID <code>{emp_id}</code> —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f""
                             f"‚ö† –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID <code>"
                             f"{emp_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                             reply_markup=cancel_kb
                             )

    await state.clear()


@router.message(F.chat.type == "private",Command("today_birthdays"))
async def today_birthdays(message: Message):
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    employees = storage.get_today_birthdays()
    if not employees:
        await message.answer("üéÇ –°–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç.")
        return

    text = "üéâ <b>–°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!</b>\n\n"
    for emp in employees:
        text += f"üéÇ <b>{emp['name']}</b> ‚Äî {emp['telegram']}\n"

    await message.answer(text)


@router.my_chat_member()
async def on_bot_added(event: ChatMemberUpdated, bot):
    old_status = event.old_chat_member.status
    new_status = event.new_chat_member.status

    if (old_status in ("left", "kicked")
            and new_status in ("member", "administrator")):
        chat_id = event.chat.id
        save_chat_id(chat_id)
        await bot.send_message(chat_id,
                               "‚úÖ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å "
                               "–∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
                               )


class HRStates(StatesGroup):
    waiting_hr_id = State()
    waiting_remove_hr_id = State()



@router.message(F.chat.type == "private", F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å HR")
async def menu_add_hr(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await state.set_state(HRStates.waiting_hr_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –Ω–æ–≤–æ–≥–æ HR:", reply_markup=cancel_kb)


@router.message(F.chat.type == "private", HRStates.waiting_hr_id, F.text)
async def process_add_hr(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    text = message.text.strip()
    try:
        new_hr = int(text)
        if new_hr in HR_IDS:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ HR.")
        else:
            HR_IDS.append(new_hr)
            save_hr(HR_IDS)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{new_hr}</code> —Ç–µ–ø–µ—Ä—å HR.", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_kb)



@router.message(F.chat.type == "private", F.text == "üóë –£–¥–∞–ª–∏—Ç—å HR")
async def menu_remove_hr(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await state.set_state(HRStates.waiting_remove_hr_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ user_id HR, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=cancel_kb)


@router.message(F.chat.type == "private", HRStates.waiting_remove_hr_id, F.text)
async def process_remove_hr(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    text = message.text.strip()
    try:
        hr_id = int(text)
        if hr_id not in HR_IDS:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ HR.")
        else:
            HR_IDS.remove(hr_id)
            save_hr(HR_IDS)
            await message.answer(
                f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{hr_id}</code> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ HR.",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardRemove()
            )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_kb)


@router.message(F.chat.type == "private", Command("list_hr"))
async def list_hr(message: Message):
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not HR_IDS:
        return await message.answer("üë• –°–µ–π—á–∞—Å –Ω–µ—Ç HR.")

    text = "üë• <b>–¢–µ–∫—É—â–∏–µ HR:</b>\n\n"
    buttons = []

    for hr in HR_IDS:
        text += f"üÜî <a href='tg://user?id={hr}'>{hr}</a>\n"
        buttons.append([InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {hr}", callback_data=f"remove_hr:{hr}")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@router.callback_query(lambda c: c.data and c.data.startswith("remove_hr:"))
async def remove_hr_callback(query: CallbackQuery):
    hr_id = int(query.data.split(":")[1])
    if not is_hr(query.from_user):
        return await query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    if hr_id in HR_IDS:
        HR_IDS.remove(hr_id)
        save_hr(HR_IDS)
        await query.message.edit_text(
            f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={hr_id}'>{hr_id}</a> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ HR.",
            parse_mode="HTML"
        )
        await query.answer("‚úÖ HR —É–¥–∞–ª—ë–Ω")
    else:
        await query.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ HR", show_alert=True)


class SearchEmployee(StatesGroup):
    waiting_query = State()

@router.message(F.chat.type == "private", F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def menu_search_employee(message: Message, state: FSMContext):
    if not is_hr(message):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await state.set_state(SearchEmployee.waiting_query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=cancel_kb)


@router.message(F.chat.type == "private", SearchEmployee.waiting_query, F.text)
async def process_search_employee(message: Message, state: FSMContext):
    if message.text.startswith("/") or message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return

    query = message.text.strip()
    employees = storage.get_all()
    results = []

    for emp in employees:
        if query.lower() in emp['name'].lower() or query == str(emp['id']) or query == emp.get("telegram", ""):
            results.append(emp)

    if not results:
        await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_kb)
        return

    for emp in results:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_emp:{emp['id']}"),
                    InlineKeyboardButton(text="üéâ –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å", callback_data=f"congrats_emp:{emp['id']}")
                ]
            ]
        )
        caption = f"<b>{emp['name']}</b>\nüéÇ {emp['birthday']}   üíº {emp['telegram']}\nüÜî ID: <code>{emp['id']}</code>"

        if emp.get("photo"):
            from aiogram.types import FSInputFile
            from pathlib import Path
            PHOTOS_DIR = Path(__file__).parent.parent / "photos"
            photo_path = PHOTOS_DIR / emp["photo"]
            if photo_path.exists():
                photo_file = FSInputFile(path=str(photo_path))
                await message.answer_photo(photo=photo_file, caption=caption, parse_mode="HTML", reply_markup=kb)
            else:
                await message.answer(caption, parse_mode="HTML", reply_markup=kb)
        else:
            await message.answer(caption, parse_mode="HTML", reply_markup=kb)

    await state.clear()


@router.callback_query(lambda c: c.data and c.data.startswith("remove_emp:"))
async def remove_emp_callback(query: CallbackQuery):
    emp_id = query.data.split(":", 1)[1]
    removed = storage.remove_employee(emp_id)

    if removed:
        await query.message.edit_text(
            f"üóë –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID <code>{emp_id}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML"
        )
        await query.answer("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")
    else:
        await query.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("congrats_emp:"))
async def congrats_employee(query: CallbackQuery, state: FSMContext):
    emp_id = query.data.split(":")[1]
    emp = storage.get_by_id(emp_id)
    if not emp:
        return await query.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    await state.update_data(congrats_emp_id=emp_id)
    await state.set_state(CongratsEmployee.waiting_text)
    await query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è <b>{emp['name']}</b>:", parse_mode="HTML")


@router.message(F.chat.type == "private", CongratsEmployee.waiting_text, F.text)
async def process_congrats_text(message: Message, state: FSMContext):
    data = await state.get_data()
    emp_id = data.get("congrats_emp_id")
    emp = storage.get_by_id(emp_id)
    chat_id = load_chat_id()

    text = message.text.strip()
    final_text = f"{emp['name']}, {text}"
    print(final_text)
    if emp.get("telegram"):
        final_text += f" {emp['telegram']}"

    if emp.get("photo"):
        from aiogram.types import FSInputFile
        from pathlib import Path
        PHOTOS_DIR = Path(__file__).parent.parent / "photos"
        photo_path = PHOTOS_DIR / emp["photo"]
        photo_file = FSInputFile(path=str(photo_path))
        await message.bot.send_photo(chat_id=chat_id, photo=photo_file, caption=final_text)
    else:
        await message.bot.send_message(chat_id=chat_id, text=final_text)

    await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()

